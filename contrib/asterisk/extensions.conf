;--------------------------------------------------------------------
;[globals]
;PBX_DEFAULT_LANG=xvb.EN-Female

;--------------------------------------------------------------------
; agi setup
;
[macro-agi-setup]
exten => s,1,GotoIf($["${ENV(AGI_SERVER)}" = ""]?set_def)
exten => s,2,Set(AGI_SERVER=${ENV(AGI_SERVER)})
exten => s,10(set_def),Set(AGI_SERVER=127.0.0.1)


;--------------------------------------------------------------------
; agi run
;
[macro-agi-run]
exten => s,1,Agi(agi://${AGI_SERVER}/${ARG1}?${ARG2})
exten => s,n,GotoIf($["${AGISTATUS}" = "FAILURE"]?agi_failover)
exten => s,1000(agi_failover),Agi(/opt/VirtualPBX/contrib/utils/Fagi.pl,agi,,action=${ARG1}&${ARG2});
;
exten => h,1,GotoIf($["${ARG3}" = ""]?noop)
exten => h,n,Agi(agi://${AGI_SERVER}/${ARG3}?${ARG4})
exten => h,n,GotoIf($["${AGISTATUS}" = "FAILURE"]?hagi_failover:noop)
exten => h,1000(hagi_failover),Agi(/opt/VirtualPBX/contrib/utils/Fagi.pl,agi,,action=${ARG3}&${ARG4});
exten => h,n(noop),NoOp(agi-run-end)


;--------------------------------------------------------------------
; dialout announcement
;
[macro-xvb-announcement]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
; exten number
exten => s,n,GotoIf($["${ARG4}" = "void"] ?callerid)
exten => s,n,Playback(void-2)
exten => s,n,SendDTMF(${ARG4})
;
; callerID
exten => s,n(callerid),Wait(0.5)
exten => s,n,GotoIf($[${ARG3} = 0] ?announcement)
exten => s,n,Playback(dialout-callerid)
exten => s,n,SayAlpha(${ORIG_CALLERID})
;
;announcement
exten => s,n(announcement),GotoIf($["${ARG1}" = "void"] ?callconfirm)
exten => s,n,Playback(${ARG1})
;
;call confirm
exten => s,n(callconfirm),GotoIf($[${ARG2} = 0] ?call-accepted)
exten => s,n,Set(AnnLoop=0)
exten => s,n(repeat-options),GotoIf($[${AnnLoop} > 3] ?call-declined)
exten => s,n,Read(ACCEPT-CALL,dialout-confirm,1)
;
exten => s,n,Set(AnnLoop=${MATH(${AnnLoop}+1)})
;
exten => s,n,GotoIf($["${ACCEPT-CALL}" = ""] ?repeat-options)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 1] ?call-accepted)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 2] ?call-declined)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 3] ?call-transfer)
;exten => s,n,GotoIf($[${ACCEPT-CALL} = 4] ?call-parking)
;
exten => s,n,Goto(s,repeat-options)
;
exten => s,n(call-transfer),Read(EXT_NUM,pbx-transfer)
exten => s,n,Set(DB(xvb-transfer/${PROC_ID})=${EXT_NUM})
;
exten => s,n(call-declined),Set(MACRO_RESULT=BUSY)
;
exten => s,n(call-accepted),NoOp


;--------------------------------------------------------------------
; queue announcement
;
[macro-xvb-queue]
;
exten => s,1(main),Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,GotoIf($["${ARG1}" = ""] ?set_serv)
exten => s,n,Playback(${ARG1})
exten => s,n(set_serv),Macro(agi-setup)
exten => s,n,Macro(agi-run,memcache_var,var=xvb-queue-call-${CALL_ID}&val=0&to=2)

;--------------------------------------------------------------------
;  smartdial macro
;
[macro-xvb-smartdial]
exten => s,1,Set(WHO_TERM=SRC)
exten => s,n,Set(SOFT_TERM=0)
exten => s,n,Dial(${ARG1},${ARG2},g${ARG3},${ARG4})
exten => s,n,GotoIf($[${SOFT_TERM} = 1] ?end)
exten => s,n,Set(WHO_TERM=DST)
exten => s,n(end),NoOp

;--------------------------------------------------------------------
;  hangup
;
[macro-xvb-call-hangup]
exten => s,1,Set(SOFT_TERM=1)
exten => s,n,Hangup()

;--------------------------------------------------------------------
;  transfer macro
;
[macro-xvb-call-transfer]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(EXT_NUM,pbx-transfer)
exten => s,n,Set(DB(xvb-transfer/${PROC_ID})=${EXT_NUM})
exten => s,n,Hangup()

;--------------------------------------------------------------------
;  parking macro
;
[macro-xvb-call-parking]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,GotoIf($["${PARKING_EXT}" != ""]?preset)
exten => s,n,Read(PARKING_EXT,parking-announce)
exten => s,n,GotoIf($["${PARKING_EXT}" = ""]?bad_slot)
exten => s,n(preset),Set(DB(xvb-transfer/${PROC_ID})=*${PARKING_EXT})
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,memcache_counter,mode=incr&var=xvb-parking-counter&max=9999)
exten => s,n,Macro(agi-run,memcache_var,var=xvb-parking-slot-${CALL_ID}&val=${MEMCACHE_RESULT}&to=30)
exten => s,n,Playback(parking-slot-is)
exten => s,n,SayDigits(${MEMCACHE_RESULT})
exten => s,n,Hangup()
exten => s,n(bad_slot),Playback(parking-invalid-slot)

;--------------------------------------------------------------------
; on touch recording
;
[macro-xvb-call-record]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,GotoIf($[${MONITOR_STATUS} = 0] ?start-mon)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 1] ?unpause-mon)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 2] ?pause-mon)

exten => s,100(start-mon),MixMonitor(${RECORDED_FILE}.${FILE_FORMAT})
exten => s,n,Set(MONITOR_STATUS=2)
exten => s,n,Playback(dialout-record-start)
exten => s,n,GoTo(end)
;
exten => s,110(unpause-mon),MixMonitor(${RECORDED_FILE}.${FILE_FORMAT},a)
exten => s,n,Set(MONITOR_STATUS=2)
exten => s,n,Playback(dialout-record-start)
exten => s,n,GoTo(end)
;
exten => s,120(pause-mon),StopMixMonitor
exten => s,n,Set(MONITOR_STATUS=1)
exten => s,n,Playback(dialout-record-stop)
exten => s,n,GoTo(end)
;
exten => s,500(end),NoOp(MonExit)

;--------------------------------------------------------------------
; bg-music MOH
;
[macro-xvb-bg-music-moh]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(KEY,beep,2,,,2);
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,bg_music,file_ind=${KEY}&is_moh=1)

;--------------------------------------------------------------------
; bg-music PLAY
;
[macro-xvb-bg-music-play]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(KEY,beep,2,,,2);
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,bg_music,file_ind=${KEY}&is_moh=0)

;--------------------------------------------------------------------
; PITCH Change
;
[macro-xvb-pitch]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(PITCH,beep,3,,,2);
exten => s,n,GotoIf($["${PITCH}" = ""]?nodata)
exten => s,n,Set(PITCH_SHIFT(rx)=${PITCH:0:1}.${PITCH:1:2})
exten => s,n(nodata),NoOp(exit pitch)

;--------------------------------------------------------------------
; AGI
;
[xvb-main]
exten => _X.,1,Answer()
exten => _X.,n,Set(__ORIG_CALLERID=${CALLERID(num)})
exten => _X.,n,Set(__ORIG_CALLEDID=${EXTEN})
exten => _X.,n,Set(CHANNEL(language)=${PBX_DEFAULT_LANG})
exten => _X.,n,AGI(/opt/VirtualPBX/agi-bin/VirtualPBX.agi)
exten => _X.,n,GotoIf($["${POST_PLAYBACK}" = ""]?skip_post_playback)
exten => _X.,n,Playback(${POST_PLAYBACK})
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
; post_playback
exten => _X.,n(skip_post_playback),Playback(goodbye)
exten => _X.,n,Hangup()


;--------------------------------------------------------------------
; FastAGI auth
;
[xvb-main-fagi]
exten => _X.,1,Set(__ORIG_CALLERID=${CALLERID(num)})
exten => _X.,n,Set(__ORIG_CALLEDID=${EXTEN})
exten => _X.,n,Set(CDR_TIME=${EPOCH})
exten => _X.,n,Set(CDR_DID=${EXTEN})
;
exten => _X.,n,Macro(agi-setup)
;
exten => _X.,n,GotoIf($["${ENV(LOCAL_ID)}" = ""]?20)
exten => _X.,n,Set(LOCAL_ID=${ENV(LOCAL_ID)})
exten => _X.,n,Goto(21)
exten => _X.,20,Set(LOCAL_ID=127.0.0.1)
;
exten => _X.,n,Set(CHANNEL(language)=${PBX_DEFAULT_LANG})
;
; default values
exten => _X.,n,Set(SERVER_ID=${LOCAL_ID})
exten => _X.,n,Set(XVB_LOGIN_STATUS=3)
;
; direct numbers
exten => _X.,n,Macro(agi-run,check_ac,ac=${EXTEN}&pn=${EXTEN}&sip=no)
exten => _X.,n,Set(AUTH_STR=${EXTEN}*${EXTEN})
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 1] ?start)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 2] ?lock)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 3] ?error)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 4] ?limits)
;
; auth by ac
exten => _X.,n,Set(Loop=0)
exten => _X.,n,Answer()
exten => _X.,n(loop),GotoIf($[${Loop} > 3] ?stop)
exten => _X.,n,Read(ACCESS_CODE,input-access_code)
exten => _X.,n,Set(Loop=${MATH(${Loop}+1)})
exten => _X.,n,Macro(agi-run,check_ac,ac=${ACCESS_CODE}&pn=${EXTEN}&sip=no)
exten => _X.,n,Set(AUTH_STR=${EXTEN}*${ACCESS_CODE})
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 1] ?start)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 2] ?lock)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 3] ?error)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 4] ?limits)
exten => _X.,n,Playback(invalid-access_code)
exten => _X.,n,Goto(loop)
;
; Fagi Error
exten => _X.,n(error),Answer()
exten => _X.,n,Playback(service-unavail)
exten => _X.,n,Hangup()
;
; max attempts
exten => _X.,n(stop),Playback(exceeded-attempts)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
; ac lock
exten => _X.,n(lock),Answer()
exten => _X.,n,Playback(service-locked)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
; customer call limit
exten => _X.,n(limits),Answer()
exten => _X.,n,Playback(call-limits-in)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
exten => _X.,n(start),GotoIf($["${SERVER_ID}" = "${LOCAL_ID}"] ?local-handler)
;
; remote server ( from sip peers with can-reinvite = yes )
exten => _X.,n,Transfer(SIP/${AUTH_STR}@${NODE_IP})
exten => _X.,n,Hangup()
;
; local user
exten => _X.,n(local-handler),Answer()
exten => _X.,n,Background(please-wait)
exten => _X.,n,Set(CDR_TIME=0)
exten => _X.,n,Goto(xvb-main,${AUTH_STR},agi)

exten => h,1,GotoIf($[${CDR_TIME} > 0]?10)
exten => h,10,Macro(agi-run,log_unknown_call,c=c)

;--------------------------------------------------------------------
; SIP domains FastAGI auth
;
[xvb-main-fagi-sip]
exten => _X.,1,Set(__ORIG_CALLERID=${CALLERID(num)})
exten => _X.,n,Set(__ORIG_CALLEDID=${EXTEN})
;
exten => _X.,n,Set(CHANNEL(language)=${PBX_DEFAULT_LANG})
;
exten => _X.,n,Macro(agi-setup)
;
exten => _X.,n,GotoIf($["${ENV(LOCAL_ID)}" = ""]?20)
exten => _X.,n,Set(LOCAL_ID=${ENV(LOCAL_ID)})
exten => _X.,n,Goto(21)
exten => _X.,20,Set(LOCAL_ID=127.0.0.1)
;
; default values
exten => _X.,n,Set(SERVER_ID=${LOCAL_ID})
exten => _X.,n,Set(XVB_LOGIN_STATUS=3)
;
; sip domains
exten => _X.,n,Macro(agi-run,check_ac,sip=yes)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 1] ?start)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 2] ?lock)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 3] ?error)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 4] ?limits)
exten => _X.,n,Congestion()
exten => _X.,n,Hangup()
;
; Fagi Error
exten => _X.,n(error),Answer()
exten => _X.,n,Playback(service-unavail)
exten => _X.,n,Hangup()
;
; ac lock
exten => _X.,n(lock),Answer()
exten => _X.,n,Playback(service-locked)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
; customer call limit
exten => _X.,n(limits),Answer()
exten => _X.,n,Playback(call-limits-in)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
exten => _X.,n(start),GotoIf($["${SERVER_ID}" = "${LOCAL_ID}"] ?local-handler)
;
; remote server ( from sip peers with can-reinvite = yes )
exten => _X.,n,Transfer(SIP/${AUTH_STR}@${NODE_IP})
exten => _X.,n,Hangup()
;
; local user
exten => _X.,n(local-handler),Answer()
exten => _X.,n,Background(please-wait)
exten => _X.,n,Goto(xvb-main,${AUTH_STR},agi)


;--------------------------------------------------------------------
;callback
;
[xvb-callback]
exten => _X.,1,Set(CALL_TYPE=callback)
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Macro(agi-run,callback_status,ct=Callback)


;--------------------------------------------------------------------
; alarmclock handler
;
[xvb-alarmclock-handler]
exten => s,1,Set(FE=${STAT(e,${XVB_PLAYBACK_FILE})})
exten => s,n,GotoIf($["${FE}" = "0"] ?stop)
;
exten => s,n,Set(CB_PH_INDEX=1)
exten => s,n,Set(CB_PH_COUNT=${MATH(${CB_PH_COUNT}+0)})
exten => s,n(loop),Set(CB_PN=${CUT(CB_CALL_STR,&,${CB_PH_INDEX})})
exten => s,n,Set(XVB_PN=${CUT(CB_XVB_PN,&,${CB_PH_INDEX})})
exten => s,n,GotoIf($["${CB_PN}" = ""] ?stop)
exten => s,n,Dial(${CB_PN},${CB_TO})
exten => s,n,GotoIf($["${DIALSTATUS}" = "ANSWER"] ?stop)
exten => s,n,Set(CB_PH_INDEX=${MATH(${CB_PH_INDEX}+1)})
exten => s,n,GotoIf($[${CB_PH_INDEX} <= ${CB_PH_COUNT}] ?loop)
exten => s,n(stop),NoOp(AlarmClockEnd)
exten => s,n,Hangup

[xvb-alarmclock]
exten => _X.,1,Set(CALL_TYPE=alarmclock)
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Macro(agi-run,callback_status,ct=AlarmClock)


;--------------------------------------------------------------------
; callblast handler
;
[xvb-callblast]
exten => _X.,1,Set(CALL_TYPE=callblast)
exten => _X.,n,Macro(agi-setup)
exten => _X.,n,AMD
exten => _X.,n,Set(MACHINE_DETECT=${AMDSTATUS})
exten => _X.,n,Macro(agi-run,callblast_status,status=success&data_id=${DATA_ID},callblast_status,status=failed&data_id=${DATA_ID})
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Macro(agi-run,callblast_status,status=failed&data_id=${DATA_ID})
;
exten => h,1,Macro(agi-run,callblast_status,status=failed&data_id=${DATA_ID})


;--------------------------------------------------------------------
; callblast multidial context
;
[xvb-callblast-multidial]
exten => s,1,Set(CB_PH_INDEX=1)
exten => s,n,Set(CB_PH_COUNT=${MATH(${CB_PH_COUNT}+0)})
exten => s,n(loop),Set(CB_PN=${CUT(CB_CALL_STR,&,${CB_PH_INDEX})})
exten => s,n,Set(XVB_PN=${CUT(CB_XVB_PN,&,${CB_PH_INDEX})})
exten => s,n,GotoIf($["${CB_PN}" = ""] ?stop)
exten => s,n,Dial(${CB_PN},${CB_TO})
exten => s,n,GotoIf($["${DIALSTATUS}" = "ANSWER"] ?stop)
exten => s,n,Set(CB_PH_INDEX=${MATH(${CB_PH_INDEX}+1)})
exten => s,n,GotoIf($[${CB_PH_INDEX} <= ${CB_PH_COUNT}] ?loop)
exten => s,n(stop),NoOp(CallBlastEnd)
;
exten => h,1,Macro(agi-run,callblast_status,status=failed&data_id=${DATA_ID})


;--------------------------------------------------------------------
; phones
;
[xvb-phones]
;
; ivr
exten => _*.,1,Macro(agi-setup)
exten => _*.,n,Set(CALLED_NUMBER=${EXTEN})
exten => _*.,n(agi),Macro(agi-run,local_call,mode=start)
exten => _*.,n,GotoIf($["${ROUTE}" != "4"]?hangup)
exten => _*.,n,Set(CALL_TYPE=local)
exten => _*.,n,Goto(xvb-main,${PHONE},1)
exten => _*.,n(hangup),Set(WHO_TERM=PBX)
exten => _*.,n,Hangup
;
; digits
exten => _X.,1,Macro(agi-setup)
exten => _X.,n,Set(CALLED_NUMBER=${EXTEN})
exten => _X.,n(agi),Macro(agi-run,local_call,mode=start)
;
; check route result
exten => _X.,n,Set(WHO_TERM=SRC)
exten => _X.,n,GotoIf($["${ROUTE}" = "1"]?local_chan)
exten => _X.,n,GotoIf($["${ROUTE}" = "2"]?sip_chan)
exten => _X.,n,GotoIf($["${ROUTE}" = "3"]?phone_chan)
exten => _X.,n,Hangup
; local
exten => _X.,n(local_chan),Dial(LOCAL/${PHONE}@${PEER},,gm)
exten => _X.,n,Set(WHO_TERM=DST)
exten => _X.,n,Hangup
;
; sip routes
exten => _X.,n(sip_chan),Dial(SIP/${PHONE}@${PEER},,gm)
exten => _X.,n,Set(WHO_TERM=DST)
exten => _X.,n,Hangup
; phones
exten => _X.,n(phone_chan),Dial(SIP/${PEER},,g)
exten => _X.,n,Set(WHO_TERM=DST)
exten => _X.,n,Hangup
;
exten => _X.,n(hangup),Set(WHO_TERM=PBX)
exten => _X.,n,Hangup
;
; Write CDR
exten => h,1,GotoIf($["${ROUTE}" != ""]?xvb)
exten => h,n(xvb),Macro(agi-run,local_call,mode=stop)


;--------------------------------------------------------------------
; default dialout context
;
[xvb-dialout-def]
exten => _X.,1,SIPAddHeader("XVB-AC:${XVB_AC}")
exten => _X.,n,Dial(SIP/${EXTEN}@dialout-service)


;--------------------------------------------------------------------
; default conference context
;
[xvb-conf-def]
exten => _X.,1,Answer()
exten => _X.,n,Wait(1)
exten => _X.,n,Konference(${EXTEN})
exten => _X.,n,Hangup()

;--------------------------------------------------------------------
; streaming context's
;
[xvb-streaming-player-single]
exten => _X.,1,Answer()
exten => _X.,n,MP3Player(${URL})
exten => _X.,n,Hangup

[xvb-streaming-player]
exten => _X.,1,Answer()
exten => _X.,n(loop),MP3Player(${URL})
exten => _X.,n,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => _X.,n,Playback(${POST_FILE})
exten => _X.,n,WaitMusicOnHold(30)
exten => _X.,n,Goto(loop)
;
exten => h,1,Macro(agi-setup)
exten => h,n,Macro(agi-run,memcache_counter,mode=decr&var=${STREAM_KEY})

[xvb-streaming-host]
exten => _X.,1,Answer()
exten => _X.,n,Konference(${EXTEN},LMx)
exten => _X.,n,Hangup()

[xvb-streaming-participant]
exten => _X.,1,Answer()
exten => _X.,n,Konference(${EXTEN},x)
exten => _X.,n,Hangup()

;--------------------------------------------------------------------
; parking context's
;
[xvb-call-parking]
exten => parking,1,Macro(agi-setup)
exten => parking,n,Macro(agi-run,memcache_var,var=xvb-parking-chan-${CALL_ID}&val=${CHANNEL}&to=86400)
exten => parking,n,Wait(86400)
;
;
exten => unparking,1,Answer
exten => unparking,n,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => unparking,n(main),Bridge(${UNPARK_CHANNEL})
exten => unparking,n,GotoIf($["${BRIDGERESULT}" = "SUCCESS"]?ok)
exten => unparking,n,Playback(parking-invalid-slot)
exten => unparking,n,Goto(stop)
exten => unparking,n(ok),Macro(agi-setup)
exten => unparking,n,Macro(agi-run,memcache_var,var=xvb-parking-chan-${CALL_ID}&val=0&to=1)
exten => unparking,n(stop),Hangup

;--------------------------------------------------------------------
; nodes exchange
;
[xvb-nodes-exchange]
exten => unparking,1,Answer
exten => unparking,n,Set(UNPARK_CHANNEL=${SIP_HEADER(XVB-Unpark-Channel)})
exten => unparking,n,Set(CALL_ID=${SIP_HEADER(XVB-Call-Id)})
exten => unparking,n,Set(CHANNEL(language)=${SIP_HEADER(XVB-Lang)})
exten => unparking,n,Goto(xvb-call-parking,${EXTEN},main)

;--------------------------------------------------------------------
; BackGroundMusic
;
[xvb-bg-music]
exten => play,1,Answer
exten => play,n,Macro(agi-setup)
exten => play,n,Macro(agi-run,memcache_counter,mode=incr&var=bg-moh-${XVB_SPY_CHAN})
exten => play,n,GotoIf($[${MEMCACHE_RESULT} > 3]?hangup)
exten => play,n,NoOp(${MEMCACHE_RESULT})
exten => play,n(loop),Playback(${XVB_SPY_MOH_FILE})
exten => play,n,GotoIf($["${XVB_PLAY_MODE}" = "0"]?hangup)
exten => play,n,GotoIF($["${PLAYBACKSTATUS}" = "SUCCESS"]?loop)
exten => play,n(hangup),Hangup
;
exten => h,1,NoOp(BG-MUSIC-HANGUP)
exten => h,n,Macro(agi-run,memcache_counter,mode=decr&var=bg-moh-${XVB_SPY_CHAN})

