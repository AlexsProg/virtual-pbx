;
; $Id: extensions.conf,v 1.102 2012-01-20 12:37:47 gosha Exp $
;
;--------------------------------------------------------------------
;[globals]
;PBX_DEFAULT_LANG=xvb.EN-Female
;PBX_AGI_MODE=perl-worker
;PBX_CONFERENCE_SERVER=127.0.0.1

;--------------------------------------------------------------------
; agi setup
;
[macro-agi-setup]
exten => s,1,GotoIf($["${ENV(AGI_SERVER)}" = ""]?set_def)
exten => s,2,Set(AGI_SERVER=${ENV(AGI_SERVER)})
exten => s,10(set_def),Set(AGI_SERVER=127.0.0.1)


;--------------------------------------------------------------------
; agi run
;
[macro-agi-run]
exten => s,1,Agi(agi://${AGI_SERVER}/${ARG1}?${ARG2})
exten => s,n,GotoIf($["${AGISTATUS}" = "FAILURE"]?agi_failover)
exten => s,1000(agi_failover),Agi(/opt/VirtualPBX/contrib/utils/Fagi.pl,agi,,action=${ARG1}&${ARG2})
;
exten => h,1,GotoIf($["${ARG3}" = ""]?noop)
exten => h,n,Agi(agi://${AGI_SERVER}/${ARG3}?${ARG4})
exten => h,n,GotoIf($["${AGISTATUS}" = "FAILURE"]?hagi_failover:noop)
exten => h,1000(hagi_failover),Agi(/opt/VirtualPBX/contrib/utils/Fagi.pl,agi,,action=${ARG3}&${ARG4})
exten => h,n(noop),NoOp(agi-run-end)


;--------------------------------------------------------------------
; dialout announcement
;
[macro-xvb-announcement]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
; FMC
exten => s,n(fmc),GotoIf($["${ARG5}" = "0"] ?dtmf)
exten => s,n,Set(SHARED(xvb-b-dialedpeernumber,${ORIG_CHANNEL})=${DIALEDPEERNUMBER})
;
; exten number
exten => s,n(dtmf),GotoIf($["${ARG4}" = "void"] ?callerid)
exten => s,n,Playback(void-2)
exten => s,n,SendDTMF(${ARG4})
;
; callerID
exten => s,n(callerid),GotoIf($[${ARG3} = 0] ?announcement)
exten => s,n,Wait(0.5)
exten => s,n,Playback(dialout-callerid)
exten => s,n,SayAlpha(${ORIG_CALLERID})
;
;announcement
exten => s,n(announcement),GotoIf($["${ARG1}" = "void"] ?callconfirm)
exten => s,n,Playback(${ARG1})
;
;call confirm
exten => s,n(callconfirm),GotoIf($[${ARG2} = 0] ?nothing)
exten => s,n,Set(AnnLoop=0)
exten => s,n(repeat-options),GotoIf($[${AnnLoop} > 2] ?call-noanswer)
exten => s,n,Read(ACCEPT-CALL,dialout-confirm,1)
;
exten => s,n,Set(AnnLoop=${MATH(${AnnLoop}+1)})
;
exten => s,n,GotoIf($["${ACCEPT-CALL}" = ""] ?repeat-options)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 0] ?call-accepted)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 7] ?call-declined)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 9] ?call-transfer)
exten => s,n,GotoIf($[${ACCEPT-CALL} = 8] ?call-parking)
;
exten => s,n,Goto(s,repeat-options)
;
exten => s,n(call-accepted),Set(SHARED(xvb-a-call-${DIALEDPEERNUMBER},${ORIG_CHANNEL})=1)
exten => s,n,Hangup
;
exten => s,n(call-declined),Set(MACRO_RESULT=BUSY)
exten => s,n,Hangup
;
exten => s,n(call-transfer),Set(MACRO_RESULT=CONTINUE)
exten => s,n,Macro(xvb-call-transfer)
exten => s,n,Hangup
;
exten => s,n(call-parking),Set(MACRO_RESULT=CONTINUE)
exten => s,n,Macro(xvb-call-parking)
exten => s,n,Hangup
;
exten => s,n(call-noanswer),Set(MACRO_RESULT=CONTINUE)
exten => s,n,Hangup
;
exten => s,n(nothing),Hangup
;--------------------------------------------------------------------
; queue announcement
;
[macro-xvb-queue]
;
exten => s,1(main),Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Macro(agi-setup)
;
; On Call Answered URL
exten => s,n,GotoIf($["${ARG2}" = "0"] ?announcement)
exten => s,n,Macro(agi-run,call_answered_http_hook)
exten => s,n,GotoIf($["${XVB_CURL_URL}" = ""] ?announcement)
exten => s,n,Set(Q_CURL_RESULT=${CURL(${XVB_CURL_URL})})
;
exten => s,n(announcement),GotoIf($["${ARG1}" = ""] ?counters)
exten => s,n,Playback(${ARG1})
;
exten => s,n(counters),Macro(agi-run,memcache_var,var=sh-queue-call-${XVB_CALL_ID}&val=0&to=2)

;--------------------------------------------------------------------
;  smartdial macro
;
[macro-xvb-smartdial]
exten => s,1,Set(WHO_TERM=SRC)
exten => s,n,Set(SOFT_TERM=0)
exten => s,n,GotoIf($["${XVB_FMC1}" = ""]?wofmc)
;
exten => s,n,GotoIf($["${XVB_SIP_EXISTS}" = "1"]?localhook)
exten => s,n,GotoIf($["${CUT(ARG1,/,1)}" != "Local"]?localhook)
exten => s,n,GotoIf($["${CUT(ARG1,/,1)}" != "LOCAL"]?localhook)
exten => s,n,Dial(${ARG1},${ARG2},g${ARG3}${XVB_FMC_MOH},${ARG4})
exten => s,n,Goto(result)
;
exten => s,n(wofmc),Dial(${ARG1},${ARG2},g${ARG3},${ARG4})
exten => s,n,Goto(result)
;
exten => s,n(localhook),Set(_SDparam1=${ARG1})
exten => s,n,Set(_SDparam3=${ARG3})
exten => s,n,Set(_SDparam4=${ARG4})
exten => s,n,Dial(Local/s@xvb-smartdial-local-hook/n,${ARG2},g${XVB_FMC_MOH})
;
exten => s,n(result),GotoIf($[${SOFT_TERM} = 1] ?end)
exten => s,n,Set(WHO_TERM=DST)
exten => s,n(end),NoOp(EndSmartDial)

;--------------------------------------------------------------------
; FMC-Transfer
;
[macro-xvb-fmc-transfer1]
exten => s,1,Set(__FMC_DST=${XVB_FMC1})
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,fmc_transfer)

[macro-xvb-fmc-transfer2]
exten => s,1,Set(__FMC_DST=${XVB_FMC2})
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,fmc_transfer)

[macro-xvb-fmc-transfer3]
exten => s,1,Set(__FMC_DST=${XVB_FMC3})
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,fmc_transfer)

;--------------------------------------------------------------------
;  hangup
;
[macro-xvb-call-hangup]
exten => s,1,Set(SOFT_TERM=1)
exten => s,n,Hangup()

;--------------------------------------------------------------------
;  transfer macro
;
[macro-xvb-call-transfer]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n(loop),Read(EXT_NUM,pbx-transfer)
exten => s,n,GotoIf($["${EXT_NUM}" = ""]?loop)
exten => s,n,Set(SHARED(xvb-transfer,${ORIG_CHANNEL})=${EXT_NUM})
exten => s,n,Hangup()

;--------------------------------------------------------------------
;  parking macro
;
[macro-xvb-call-parking]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,GotoIf($["${EXT_NUM}" != ""]?preset)
exten => s,n(loop),Read(EXT_NUM,parking-announce)
exten => s,n,GotoIf($["${EXT_NUM}" = ""]?loop)
exten => s,n(preset),Set(SHARED(xvb-transfer,${ORIG_CHANNEL})=*${EXT_NUM})
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,memcache_counter,mode=incr&var=parking-counter&max=9900)
exten => s,n,GotoIf($["${MEMCACHE_RESULT}" != ""]?ok)
exten => s,n,Set(MEMCACHE_RESULT=${EPOCH}${RAND(100,999)})
exten => s,n(ok),Set(SHARED(xvb-parking-slot,${ORIG_CHANNEL})=${MEMCACHE_RESULT})
exten => s,n,Playback(parking-slot-is)
exten => s,n,SayDigits(${MEMCACHE_RESULT})
exten => s,n,Hangup()

;--------------------------------------------------------------------
; on touch recording
;
[macro-xvb-call-record]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,GotoIf($[${MONITOR_STATUS} = 0] ?start-mon)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 1] ?unpause-mon)
exten => s,n,GotoIf($[${MONITOR_STATUS} = 2] ?pause-mon)

exten => s,100(start-mon),MixMonitor(${RECORDED_FILE})
exten => s,n,Set(MONITOR_STATUS=2)
exten => s,n,Playback(dialout-record-start)
exten => s,n,GoTo(end)
;
exten => s,110(unpause-mon),MixMonitor(${RECORDED_FILE},a)
exten => s,n,Set(MONITOR_STATUS=2)
exten => s,n,Playback(dialout-record-start)
exten => s,n,GoTo(end)
;
exten => s,120(pause-mon),StopMixMonitor
exten => s,n,Set(MONITOR_STATUS=1)
exten => s,n,Playback(dialout-record-stop)
exten => s,n,GoTo(end)
;
exten => s,500(end),NoOp(MonExit)

;--------------------------------------------------------------------
; bg-music MOH
;
[macro-xvb-bg-music-moh]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(KEY,beep,2,,,2)
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,bg_music,file_ind=${KEY}&is_moh=1)

;--------------------------------------------------------------------
; bg-music PLAY
;
[macro-xvb-bg-music-play]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(KEY,beep,2,,,2)
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,bg_music,file_ind=${KEY}&is_moh=0)

;--------------------------------------------------------------------
; PITCH Change
;
[macro-xvb-pitch]
;
exten => s,1,Set(CHANNEL(language)=${XVB_CUR_LANG})
;
exten => s,n,Read(PITCH,beep,3,,,2)
exten => s,n,GotoIf($["${PITCH}" = ""]?nodata)
exten => s,n,Set(PITCH_SHIFT(rx)=${PITCH:0:1}.${PITCH:1:2})
exten => s,n(nodata),NoOp(exit pitch)

;--------------------------------------------------------------------
; AGI
;
[xvb-main]
exten => _X.,1,Answer()
exten => _X.,n,Set(__ORIG_CALLERID=${CALLERID(num)})
exten => _X.,n,Set(__ORIG_CALLEDID=${EXTEN})
exten => _X.,n,Set(__ORIG_CHANNEL=${CHANNEL})
exten => _X.,n,Set(CHANNEL(language)=${GLOBAL(PBX_DEFAULT_LANG)})
; perl worker ( fork for each call )
exten => _X.,n,GotoIf($["${PBX_AGI_MODE}" != "perl-worker"]?std_agi)
exten => _X.,n,Agi(agi://127.0.0.1:4574/show-must-go-on)
exten => _X.,n,GotoIf($["${AGISTATUS}" != "FAILURE"]?post_agi)
; standard agi
exten => _X.,n(std_agi),AGI(/opt/VirtualPBX/agi-bin/VirtualPBX.agi)
; post agi playback
exten => _X.,n(post_agi),GotoIf($["${POST_PLAYBACK}" = ""]?skip_post_playback)
exten => _X.,n,Playback(${POST_PLAYBACK})
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
; post_playback
exten => _X.,n(skip_post_playback),Playback(goodbye)
exten => _X.,n,Hangup()


;--------------------------------------------------------------------
; FastAGI auth
;
[xvb-main-fagi]
exten => _X.,1,Set(__ORIG_CALLERID=${CALLERID(num)})
exten => _X.,n,Set(__ORIG_CALLEDID=${EXTEN})
exten => _X.,n,Set(CDR_TIME=${EPOCH})
exten => _X.,n,Set(CDR_DID=${EXTEN})
;
exten => _X.,n,Macro(agi-setup)
;
exten => _X.,n,GotoIf($["${ENV(LOCAL_ID)}" = ""]?20)
exten => _X.,n,Set(LOCAL_ID=${ENV(LOCAL_ID)})
exten => _X.,n,Goto(21)
exten => _X.,20,Set(LOCAL_ID=127.0.0.1)
;
exten => _X.,n,Set(CHANNEL(language)=${GLOBAL(PBX_DEFAULT_LANG)})
;
; default values
exten => _X.,n,Set(SERVER_ID=${LOCAL_ID})
exten => _X.,n,Set(XVB_LOGIN_STATUS=3)
;
; direct numbers
exten => _X.,n,Macro(agi-run,check_ac,ac=${EXTEN}&pn=${EXTEN}&sip=no)
exten => _X.,n,Set(AUTH_STR=${EXTEN}*${EXTEN})
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 1] ?start)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 2] ?lock)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 3] ?error)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 4] ?limits)
;
; auth by ac
exten => _X.,n,Set(Loop=0)
exten => _X.,n,Answer()
exten => _X.,n(loop),GotoIf($[${Loop} > 3] ?stop)
exten => _X.,n,Read(ACCESS_CODE,input-access_code)
exten => _X.,n,Set(Loop=${MATH(${Loop}+1)})
exten => _X.,n,Macro(agi-run,check_ac,ac=${ACCESS_CODE}&pn=${EXTEN}&sip=no)
exten => _X.,n,Set(AUTH_STR=${EXTEN}*${ACCESS_CODE})
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 1] ?start)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 2] ?lock)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 3] ?error)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 4] ?limits)
exten => _X.,n,Playback(invalid-access_code)
exten => _X.,n,Goto(loop)
;
; Fagi Error
exten => _X.,n(error),Answer()
exten => _X.,n,Playback(service-unavail)
exten => _X.,n,Hangup()
;
; max attempts
exten => _X.,n(stop),Playback(exceeded-attempts)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
; ac lock
exten => _X.,n(lock),Answer()
exten => _X.,n,Playback(service-locked)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
; customer call limit
exten => _X.,n(limits),Answer()
exten => _X.,n,Playback(call-limits-in)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
exten => _X.,n(start),GotoIf($["${SERVER_ID}" = "${LOCAL_ID}"] ?local-handler)
;
; remote server ( from sip peers with can-reinvite = yes )
exten => _X.,n,Transfer(SIP/${AUTH_STR}@${NODE_IP})
exten => _X.,n,Hangup()
;
; local user
exten => _X.,n(local-handler),Answer()
exten => _X.,n,Background(please-wait)
exten => _X.,n,Set(CDR_TIME=0)
exten => _X.,n,Goto(xvb-main,${AUTH_STR},agi)

exten => h,1,GotoIf($[${CDR_TIME} > 0]?10)
exten => h,10,Macro(agi-run,log_unknown_call,c=c)

;--------------------------------------------------------------------
; SIP domains FastAGI auth
;
[xvb-main-fagi-sip]
exten => _X.,1,Set(__ORIG_CALLERID=${CALLERID(num)})
exten => _X.,n,Set(__ORIG_CALLEDID=${EXTEN})
;
exten => _X.,n,Set(CHANNEL(language)=${GLOBAL(PBX_DEFAULT_LANG)})
;
exten => _X.,n,Macro(agi-setup)
;
exten => _X.,n,GotoIf($["${ENV(LOCAL_ID)}" = ""]?20)
exten => _X.,n,Set(LOCAL_ID=${ENV(LOCAL_ID)})
exten => _X.,n,Goto(21)
exten => _X.,20,Set(LOCAL_ID=127.0.0.1)
;
; default values
exten => _X.,n,Set(SERVER_ID=${LOCAL_ID})
exten => _X.,n,Set(XVB_LOGIN_STATUS=3)
;
; sip domains
exten => _X.,n,Macro(agi-run,check_ac,sip=yes)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 1] ?start)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 2] ?lock)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 3] ?error)
exten => _X.,n,GotoIf($[${XVB_LOGIN_STATUS} = 4] ?limits)
exten => _X.,n,Congestion()
exten => _X.,n,Hangup()
;
; Fagi Error
exten => _X.,n(error),Answer()
exten => _X.,n,Playback(service-unavail)
exten => _X.,n,Hangup()
;
; ac lock
exten => _X.,n(lock),Answer()
exten => _X.,n,Playback(service-locked)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
; customer call limit
exten => _X.,n(limits),Answer()
exten => _X.,n,Playback(call-limits-in)
exten => _X.,n,Playback(goodbye)
exten => _X.,n,Hangup()
;
exten => _X.,n(start),GotoIf($["${SERVER_ID}" = "${LOCAL_ID}"] ?local-handler)
;
; remote server ( from sip peers with can-reinvite = yes )
exten => _X.,n,Transfer(SIP/${AUTH_STR}@${NODE_IP})
exten => _X.,n,Hangup()
;
; local user
exten => _X.,n(local-handler),Answer()
exten => _X.,n,Background(please-wait)
exten => _X.,n,Goto(xvb-main,${AUTH_STR},agi)


;--------------------------------------------------------------------
;callback
;
[xvb-callback]
exten => _X.,1,Set(CALL_TYPE=callback)
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Macro(agi-run,callback_status,ct=Callback)


;--------------------------------------------------------------------
; alarmclock handler
;
[xvb-alarmclock-handler]
exten => s,1,Set(FE=${STAT(e,${XVB_PLAYBACK_FILE})})
exten => s,n,GotoIf($["${FE}" = "0"] ?stop)
;
exten => s,n,Set(CB_PH_INDEX=1)
exten => s,n,Set(CB_PH_COUNT=${MATH(${CB_PH_COUNT}+0)})
exten => s,n,Set(CB_TO_MC=${MATH(${CB_TO}+10)})
exten => s,n(loop),Set(CB_PN=${CUT(CB_CALL_STR,&,${CB_PH_INDEX})})
exten => s,n,Set(XVB_PN=${CUT(CB_XVB_PN,&,${CB_PH_INDEX})})
exten => s,n,GotoIf($["${CB_PN}" = ""] ?stop)
exten => s,n,Dial(${CB_PN},${CB_TO})
exten => s,n,GotoIf($["${DIALSTATUS}" = "ANSWER"] ?stop)
exten => s,n,Set(CB_PH_INDEX=${MATH(${CB_PH_INDEX}+1)})
exten => s,n,GotoIf($[${CB_PH_INDEX} <= ${CB_PH_COUNT}] ?loop)
exten => s,n(stop),NoOp(AlarmClockEnd)
exten => s,n,Hangup

[xvb-alarmclock]
exten => _X.,1,Set(CALL_TYPE=alarmclock)
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Macro(agi-run,callback_status,ct=AlarmClock)


;--------------------------------------------------------------------
; callblast handler
;
[xvb-callblast]
exten => _X.,1,Set(CALL_TYPE=callblast)
exten => _X.,n,Macro(agi-setup)
exten => _X.,n,AMD
exten => _X.,n,Set(MACHINE_DETECT=${AMDSTATUS})
exten => _X.,n,Macro(agi-run,callblast_status,status=success&data_id=${DATA_ID},callblast_status,status=failed&data_id=${DATA_ID})
exten => _X.,n,Goto(xvb-main,${EXTEN},1)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Macro(agi-run,callblast_status,status=failed&data_id=${DATA_ID})

;--------------------------------------------------------------------
; callblast multidial context
;
[xvb-callblast-multidial]
exten => s,1,Set(CB_PH_INDEX=1)
exten => s,n,Set(CB_PH_COUNT=${MATH(${CB_PH_COUNT}+0)})
exten => s,n,Set(CB_TO_MC=${MATH(${CB_TO}+10)})
exten => s,n(loop),Set(CB_PN=${CUT(CB_CALL_STR,&,${CB_PH_INDEX})})
exten => s,n,GotoIf($["${CB_PN}" = ""] ?stop)
exten => s,n,Set(XVB_PN=${CUT(CB_XVB_PN,&,${CB_PH_INDEX})})
exten => s,n,Dial(${CB_PN},${CB_TO})
exten => s,n,GotoIf($["${DIALSTATUS}" = "ANSWER"] ?stop)
exten => s,n,Set(CB_PH_INDEX=${MATH(${CB_PH_INDEX}+1)})
exten => s,n,GotoIf($[${CB_PH_INDEX} <= ${CB_PH_COUNT}] ?loop)
exten => s,n(stop),NoOp(CallBlastEnd)

;--------------------------------------------------------------------
; phones
;
[xvb-phones]
;
; ivr / service
exten => _*.,1,Set(CALLED_NUMBER=${EXTEN})
exten => _*.,n,Goto(00${$EXTEN},digits)
;
; short digits ( 0 - 9 )
exten => _X,1,Set(CALLED_NUMBER=${EXTEN})
exten => _X,n,Goto(00${$EXTEN},digits)
;
; digits
exten => _X.,1,Set(CALLED_NUMBER=${EXTEN})
exten => _X.,n(digits),Macro(agi-setup)
exten => _X.,n(agi),Macro(agi-run,local_call,mode=start)
;
; check route result
exten => _X.,n,Set(WHO_TERM=SRC)
exten => _X.,n,GotoIf($["${ROUTE}" = "1"]?local_chan)
exten => _X.,n,GotoIf($["${ROUTE}" = "2"]?sip_chan)
exten => _X.,n,GotoIf($["${ROUTE}" = "3"]?phone_chan)
exten => _X.,n,GotoIf($["${ROUTE}" = "4"]?ivr)
exten => _X.,n,GotoIf($["${ROUTE}" = "5"]?service)
exten => _X.,n,Set(WHO_TERM=PBX)
exten => _X.,n,Hangup
; local
exten => _X.,n(local_chan),Dial(LOCAL/${PHONE}@${PEER}/n,,g)
exten => _X.,n,Set(WHO_TERM=DST)
exten => _X.,n,Hangup
; sip routes
exten => _X.,n(sip_chan),Dial(SIP/${PEER}/${PHONE},,g)
exten => _X.,n,Set(WHO_TERM=DST)
exten => _X.,n,Hangup
; phones
exten => _X.,n(phone_chan),Dial(SIP/${PEER},,g)
exten => _X.,n,Set(WHO_TERM=DST)
exten => _X.,n,Hangup
; IVR
exten => _X.,n(ivr),Set(CALL_TYPE=local)
exten => _X.,n,Goto(xvb-main,${PHONE},1)
exten => _X.,n,Hangup
; services
exten => _X.,n(service),Answer
exten => _X.,n,Goto(xvb-phone-services,${PHONE},1)
exten => _X.,n,Hangup
;
; Write CDR
exten => h,1,GotoIf($["${ROUTE}" != ""]?xvb)
exten => h,10(xvb),Macro(agi-run,local_call,mode=stop)

;--------------------------------------------------------------------
; Phone services
;
[xvb-phone-services]
; echo example
exten => _**0,1,Playback(dialout-record-start)
exten => _**0,n,Set(TIMEOUT(absolute)=30)
exten => _**0,n,Echo
exten => _**0,n,Set(WHO_TERM=DST)
;
; callerid service
exten => _**1,1,Playback(dialout-callerid)
exten => _**1,n,Wait(1)
exten => _**1,n,SayDigits(${CALLERID(num)})
exten => _**1,n,Set(WHO_TERM=DST)
;
; pickup service
exten => _**2.,1,Macro(agi-setup)
exten => _**2.,n,Macro(agi-run,call_pickup_hook,phone=${EXTEN:3}&cid=${CALLERID(num)})
exten => _**2.,n,GotoIf($["${XVB_PICKUP_STATUS}" = "2"]?remote-server)
exten => _**2.,n,GotoIf($["${XVB_PICKUP_STATUS}" = "1"]?local-server)
exten => _**2.,n,Set(WHO_TERM=DST)
exten => _**2.,n,Hangup
;
exten => _**2.,1000(local-server),Set(__XVB_PICKUP_NUM=${EXTEN:3})
exten => _**2.,n,Set(__PICKUP_START=${EPOCH})
exten => _**2.,n,Goto(xvb-pickup,pickup,1)
;
; currently it works only in standalone mode.
; ToDo: support for  sip-registrar
exten => _**2.,2000(remote-server),SIPAddHeader("XVB-AC:${XVB_AC}")
exten => _**2.,n,SIPAddHeader("XVB-PICKUP-CHANNEL:${XVB_PICKUP_CHANNEL}")
exten => _**2.,n,SIPAddHeader("XVB-PICKUP-NUM:${EXTEN:3}")
exten => _**2.,n,SIPAddHeader("XVB-PICKUP-CUR-EXT:${XVB_CUR_EXT}")
exten => _**2.,n,SIPAddHeader("XVB-PICKUP-SUBSCR-ID:${SUBSCR_ID}")
exten => _**2.,n,Dial(SIP/${XVB_PICKUP_SERVER}/pickup)
exten => _**2.,n,Set(WHO_TERM=DST)
exten => _**2.,n,Hangup
;
exten => i,1,Playback(invalid-input)
;
exten => h,1,Goto(xvb-phones,h,1)
;
#include "/etc/asterisk/xvb/xvb-phone-service.conf"

;--------------------------------------------------------------------
; peers
;
[xvb-peers]
;
exten => _X.,1,Goto(xvb-main,${EXTEN},1)

[xvb-peers-oos]
exten => _X.,1,Congestion()

;--------------------------------------------------------------------
; default dialout context
;
[xvb-dialout-def]
exten => _X.,1,SIPAddHeader("XVB-AC:${XVB_AC}")
exten => _X.,n,Dial(SIP/${EXTEN}@dialout-service)


;--------------------------------------------------------------------
; default conference context
;
[xvb-conf-def]
exten => _X.,1,Answer()
exten => _X.,n,GotoIf($["${IS_HTTP_BROADCASTING}" != ""]?broadcasting)
exten => _X.,n,Konference(${EXTEN},Mx)
exten => _X.,n,Hangup()
;
exten => _X.,613(broadcasting),Konference(${EXTEN},Lx)
exten => _X.,n,Hangup()

[xvb-conf-cluster]
exten => _X.,1,GotoIf($["${GLOBAL(PBX_CONFERENCE_SERVER)}" != ""]?clustermode)
exten => _X.,n,Goto(xvb-conf-def,${EXTEN},1)
exten => _X.,n(clustermode),SIPAddHeader(XVB-CONF-ID: ${EXTEN})
exten => _X.,n,SIPAddHeader(XVB-CONF-BROADCASTING: ${IS_HTTP_BROADCASTING})
exten => _X.,n,Dial(SIP/conference@${GLOBAL(PBX_CONFERENCE_SERVER)})

;--------------------------------------------------------------------
; conference broadcasting & recording
;
[xvb-conf-http-broadcasting]
exten => _X.,1,Answer()
exten => _X.,n,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => _X.,n,GotoIf($["${RECORDED_FILE}" = ""]?broadcasting)
;
exten => _X.,n,MixMonitor(${RECORDED_FILE})
exten => _X.,n,GotoIf($["${STREAM_KEY}" = ""]?waitloop)
;
exten => _X.,n(broadcasting),Playback(${START_FILE})
exten => _X.,n,ices(${CHAN_FILE})
exten => _X.,n,Playback(${END_FILE})
exten => _X.,n,Hangup
;
exten => _X.,n(waitloop),Wait(3600)
exten => _X.,n,Goto(waitloop)
;
exten => h,1,Macro(agi-setup)
exten => h,n,Macro(agi-run,memcache_counter,mode=decr&var=${STREAM_KEY})
exten => h,n,GotoIf($["${RECORDED_FILE}" = ""]?end)
exten => h,n,Macro(agi-run,save_recording)
exten => h,n(end),NoOp(Conf-Is-Over)

;--------------------------------------------------------------------
; streaming context's
;
[xvb-streaming-player-single]
exten => _X.,1,Answer()
exten => _X.,n,MP3Player(${URL})
exten => _X.,n,Hangup

[xvb-streaming-player]
exten => _X.,1,Answer()
exten => _X.,n(loop),MP3Player(${URL})
exten => _X.,n,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => _X.,n,Playback(${POST_FILE})
exten => _X.,n,WaitMusicOnHold(30)
exten => _X.,n,Goto(loop)
;
exten => h,1,Macro(agi-setup)
exten => h,n,Macro(agi-run,memcache_counter,mode=decr&var=${STREAM_KEY})

[xvb-streaming-host]
exten => _X.,1,Answer()
exten => _X.,n,Konference(${EXTEN},LMx)
exten => _X.,n,Hangup()

[xvb-streaming-participant]
exten => _X.,1,Answer()
exten => _X.,n,Konference(${EXTEN},x)
exten => _X.,n,Hangup()

;--------------------------------------------------------------------
; parking context's
;
[xvb-call-parking]
exten => parking,1,Macro(agi-setup)
exten => parking,n,Macro(agi-run,memcache_var,var=sh-parking-chan-${XVB_CALL_ID}&val=${CHANNEL}&to=86400)
exten => parking,n,Wait(86400)
;
;
exten => unparking,1,Answer
exten => unparking,n,Set(CHANNEL(language)=${XVB_CUR_LANG})
exten => unparking,n(main),Bridge(${UNPARK_CHANNEL})
exten => unparking,n,GotoIf($["${BRIDGERESULT}" = "SUCCESS"]?ok)
exten => unparking,n,Playback(parking-invalid-slot)
exten => unparking,n,Goto(stop)
exten => unparking,n(ok),Macro(agi-setup)
exten => unparking,n,Macro(agi-run,memcache_var,var=sh-parking-chan-${UNPARK_CALL_ID}&val=0&to=1)
exten => unparking,n(stop),Hangup

;--------------------------------------------------------------------
; nodes exchange
;
[xvb-nodes-exchange]
exten => unparking,1,Answer
exten => unparking,n,Set(UNPARK_CHANNEL=${SIP_HEADER(XVB-Unpark-Channel)})
exten => unparking,n,Set(UNPARK_CALL_ID=${SIP_HEADER(XVB-Unpark-Call-Id)})
exten => unparking,n,Set(CHANNEL(language)=${SIP_HEADER(XVB-Lang)})
exten => unparking,n,Goto(xvb-call-parking,${EXTEN},main)
;
exten => conference,1,Set(IS_HTTP_BROADCASTING=${SIP_HEADER(XVB-CONF-BROADCASTING)})
exten => conference,n,Goto(xvb-conf-def,${SIP_HEADER(XVB-CONF-ID)},1)
;
exten => pickup,1,Set(__XVB_AC=${SIP_HEADER(XVB-AC)})
exten => pickup,1,Set(__XVB_PICKUP_CHANNEL=${SIP_HEADER(XVB-PICKUP-CHANNEL)})
exten => pickup,n,Set(__XVB_PICKUP_NUM=${SIP_HEADER(XVB-PICKUP-NUM)})
exten => pickup,n,Set(__SUBSCR_ID=${SIP_HEADER(XVB-PICKUP-SUBSCR-ID)})
exten => pickup,n,Set(__XVB_CUR_EXT=${SIP_HEADER(XVB-PICKUP-CUR-EXT)})
exten => pickup,n,Set(__PICKUP_START=${EPOCH})
exten => pickup,n,Set(__PICKUP_MODE=remote)
exten => pickup,n,Goto(xvb-pickup,pickup,1)

;--------------------------------------------------------------------
; BackGroundMusic
;
[xvb-bg-music]
exten => play,1,Answer
exten => play,n,Macro(agi-setup)
exten => play,n,Macro(agi-run,memcache_counter,mode=incr&var=bg-moh-${XVB_SPY_CHAN})
exten => play,n,GotoIf($[${MEMCACHE_RESULT} > ${XVB_MAX_HOOKS}]?hangup)
exten => play,n,NoOp(${MEMCACHE_RESULT})
exten => play,n,GotoIF($["${XVB_SPY_CHAN_ID}" =""]?loop)
exten => play,n,Macro(agi-run,memcache_var,var=${XVB_SPY_CHAN_ID}&val=${CHANNEL}&to=43200)
exten => play,n(loop),Playback(${XVB_SPY_MOH_FILE})
exten => play,n,GotoIf($["${XVB_PLAY_MODE}" = "0"]?hangup)
exten => play,n,GotoIF($["${PLAYBACKSTATUS}" = "SUCCESS"]?loop)
exten => play,n(hangup),Hangup
;
exten => h,1,NoOp(BG-MUSIC-HANGUP)
exten => h,n,GotoIF($["${XVB_SPY_CHILD_CHAN}" =""]?end)
exten => h,n,Macro(agi-run,memcache_var,var=${XVB_SPY_CHILD_CHAN})
exten => h,n,GotoIF($["${MEMCACHE_RESULT}" =""]?end)
exten => h,n,SoftHangup(${MEMCACHE_RESULT})
exten => h,n(end),Macro(agi-run,memcache_counter,mode=decr&var=bg-moh-${XVB_SPY_CHAN})

;--------------------------------------------------------------------
; Pickup
;
[xvb-pickup]
exten => pickup,1,Set(XVB_PICKUP_CID=${CALLERID(num)})
exten => pickup,n,PickupChan(${XVB_PICKUP_CHANNEL})
exten => pickup,n,Set(WHO_TERM=DST)
exten => pickup,n,Hangup
;
exten => h,1,Macro(agi-run,pickup_status)
exten => h,n,GotoIF($["${PICKUP_MODE}" ="remote"]?end)
exten => h,n,Goto(xvb-phones,h,1)
exten => h,n(end),NoOp(EndPickup)

;--------------------------------------------------------------------
; Paging/Intercom
;
[xvb-intercom]
exten => _X.,1,SIPAddHeader(Alert-Info: ${ALERT_INFO})
exten => _X.,n,SIPAddHeader(Call-Info: ${CALL_INFO})
exten => _X.,n,GotoIF($["${PAGE_STR}" =""]?dial)
exten => _X.,n,Page(${PAGE_STR},${PAGE_OPT})
exten => _X.,n,Hangup()
exten => _X.,n(dial),Dial(${DIAL_STR})
exten => _X.,n,Hangup()

;--------------------------------------------------------------------
; FMC-Transfer
;
[xvb-fmc-transfer]
exten => s,1,Answer
exten => s,n,Macro(agi-setup)
exten => s,n,Macro(agi-run,fmc_transfer_status,status=success)
exten => s,n,Bridge(${A_LEG_CHANNEL},x)
;
exten => failed,1,Macro(agi-setup)
exten => failed,n,Macro(agi-run,fmc_transfer_status,status=failed)

[xvb-smartdial-local-hook]
exten => s,1,Dial(${SDparam1},,${SDparam3},${SDparam4})
exten => s,n,Hangup

